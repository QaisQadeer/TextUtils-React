{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","_jsx","className","concat","mode","children","_jsxs","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","text","setText","useState","_Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","handleUpClick","newText","toUpperCase","showAlert","handleLoClick","toLowerCase","handleClearClick","handleCopy","console","log","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","handleExtraSpaces","split","join","length","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode"],"mappings":"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","file":"static/js/main.99abcd17.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport default function Navbar(props) {\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n            <div className=\"container-fluid\">\n                <a className=\"navbar-brand\" href=\"\">{props.title}</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"\">Home</a>\n                        </li>\n                        <li className=\"nav-item\">\n                        </li>\n                    </ul>\n                    {/* <form className=\"d-flex\">\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n                        <button cla\n                        ssName=\"btn btn-primary\" type=\"submit\">Search</button>\n                    </form> */}\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\n                    </div>\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired,\n    aboutText: PropTypes.string.isRequired\n}\n\nNavbar.defaultProps = {\n    title: 'Set title here',\n    aboutText: 'About'\n  };","import React, {useState} from 'react'\n\n\nexport default function TextForm(props) {\n    const handleUpClick = ()=>{\n        // console.log(\"Uppercase was clicked: \" +  text);\n        let newText = text.toUpperCase();\n        setText(newText)\n        props.showAlert(\"Converted to uppercase!\", \"success\");\n    }\n\n    const handleLoClick = ()=>{ \n        let newText = text.toLowerCase();\n        setText(newText)\n        props.showAlert(\"Converted to lowercase!\", \"success\");\n    }\n\n    const handleClearClick = ()=>{ \n        let newText = '';\n        setText(newText);\n        props.showAlert(\"Text Cleared!\", \"success\");\n    }\n\n    const handleOnChange = (event)=>{\n        // console.log(\"On change\");\n        setText(event.target.value) \n    }\n\n    // Credits: A\n    const handleCopy = () => {\n        console.log(\"I am copy\");\n        var text = document.getElementById(\"myBox\");\n        text.select();\n        text.setSelectionRange(0, 9999);\n        navigator.clipboard.writeText(text.value);\n        props.showAlert(\"Copied to Clipboard!\", \"success\");\n    }\n\n    // Credits: Coding Wala\n    const handleExtraSpaces = () => {\n        let newText = text.split(/[ ]+/);\n        setText(newText.join(\" \"));\n        props.showAlert(\"Extra spaces removed!\", \"success\");\n    }\n\n    const [text, setText] = useState(''); \n    // text = \"new text\"; // Wrong way to change the state\n    // setText(\"new text\"); // Correct way to change the state\n    return (\n        <>\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}> \n            <h1>{props.heading}</h1>\n            <div className=\"mb-3\"> \n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\n            </div>\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\n            <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\n            <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear Text</button>\n            <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\n            <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\n        </div>\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\n            <h2>Your text summary</h2>\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\n            <p>{0.008 *  text.split(\" \").length} Minutes read</p>\n            <h2>Preview</h2>\n            <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\n        </div>\n        </>\n    )\n}\n","import React from 'react'\n\nfunction Alert(props) {\n    const capitalize = (word)=>{\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n           <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} \n        </div>\n    )\n}\n\nexport default Alert\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n\n \nfunction App() {\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n      setAlert({\n        msg: message,\n        type: type\n      })\n      setTimeout(() => {\n          setAlert(null);\n      }, 1500);\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Dark Mode';\n      // setInterval(() => {\n      //   document.title = 'TextUtils is Amazing Mode';\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = 'Install TextUtils Now';\n      // }, 1500);\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Light Mode';\n    }\n  }\n  return (\n    <>\n    {/* <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" /> */}\n    {/* <Navbar/> */}\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n    {/* /users --> Component 1\n        /users/home --> Component 2 */}\n            <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>\n    </div>\n    </> \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}